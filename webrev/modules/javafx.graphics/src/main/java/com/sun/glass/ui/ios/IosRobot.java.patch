--- old/modules/javafx.graphics/src/main/java/com/sun/glass/ui/ios/IosRobot.java	2018-01-01 14:51:18.415462000 -0700
+++ new/modules/javafx.graphics/src/main/java/com/sun/glass/ui/ios/IosRobot.java	2018-01-01 14:51:18.046441400 -0700
@@ -25,8 +25,13 @@
 
 package com.sun.glass.ui.ios;
 
-import com.sun.glass.ui.*;
-import java.nio.IntBuffer;
+import com.sun.glass.ui.Application;
+import com.sun.glass.ui.GlassRobot;
+
+import javafx.scene.input.KeyCode;
+import javafx.scene.input.MouseButton;
+import javafx.scene.paint.Color;
+import javafx.scene.robot.Robot;
 
 /**
  * iOS platform implementation class of test automation Robot.
@@ -37,38 +42,44 @@
 
     // init and create native robot object
     private native long _init();
-    @Override protected void _create() {
+
+    @Override protected void create() {
+        Application.checkEventThread();
         ptr = _init();
     }
 
     // release native robot object
     private native void _destroy(long ptr);
-    @Override protected void _destroy() {
+    @Override protected void destroy() {
+        Application.checkEventThread();
         _destroy(ptr);
         ptr = 0;
     }
 
     // synthesize key press
     private native void _keyPress(long ptr, int code);
-    @Override protected void _keyPress(int code) {
+    @Override public void keyPress(KeyCode code) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
-        _keyPress(ptr, code);
+        _keyPress(ptr, code.getCode());
     }
 
     // synthesize key release
     private native void _keyRelease(long ptr, int code);
-    @Override protected void _keyRelease(int code) {
+    @Override public void keyRelease(KeyCode code) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
-        _keyRelease(ptr, code);
+        _keyRelease(ptr, code.getCode());
     }
 
     // synthesize mouse motion
     private native void _mouseMove(long ptr, int x, int y);
-    @Override protected void _mouseMove(int x, int y) {
+    @Override public void mouseMove(int x, int y) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
@@ -77,24 +88,45 @@
 
     // synthesize mouse press of buttons
     private native void _mousePress(long ptr, int buttons);
-    @Override protected void _mousePress(int buttons) {
+    @Override public void mousePress(MouseButton button) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
-        _mousePress(ptr, buttons);
+        _mousePress(ptr, GlassRobot.convertToRobotMouseButton(button));
+    }
+
+    @Override
+    public void mousePress(MouseButton... buttons) {
+        Application.checkEventThread();
+        if (ptr == 0) {
+            return;
+        }
+        _mousePress(ptr, GlassRobot.convertToRobotMouseButton(buttons));
     }
 
     // synthesize mouse release of buttons
     private native void _mouseRelease(long ptr, int buttons);
-    @Override protected void _mouseRelease(int buttons) {
+    @Override public void mouseRelease(MouseButton button) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
-        _mouseRelease(ptr, buttons);
+        _mouseRelease(ptr, GlassRobot.convertToRobotMouseButton(button));
+    }
+
+    @Override
+    public void mouseRelease(MouseButton... buttons) {
+        Application.checkEventThread();
+        if (ptr == 0) {
+            return;
+        }
+        _mouseRelease(ptr, GlassRobot.convertToRobotMouseButton(buttons));
     }
 
     private native void _mouseWheel(long ptr, int wheelAmt);
-    @Override protected void _mouseWheel(int wheelAmt) {
+    @Override protected void mouseWheel(int wheelAmt) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
@@ -103,7 +135,8 @@
 
     // get x-coordinate of mouse location
     private native int _getMouseX(long ptr);
-    @Override protected int _getMouseX() {
+    @Override public int getMouseX() {
+        Application.checkEventThread();
         if (ptr == 0) {
             return 0;
         }
@@ -112,7 +145,8 @@
 
     // get x-coordinate of mouse location
     private native int _getMouseY(long ptr);
-    @Override protected int _getMouseY() {
+    @Override public int getMouseY() {
+        Application.checkEventThread();
         if (ptr == 0) {
             return 0;
         }
@@ -120,22 +154,23 @@
     }
 
     private native int _getPixelColor(long ptr, int x, int y);
-    @Override protected int _getPixelColor(int x, int y) {
+    @Override public Color getPixelColor(int x, int y) {
+        Application.checkEventThread();
         if (ptr == 0) {
-            return 0;
+            return GlassRobot.convertFromIntArgb(0);
         }
-        return _getPixelColor(ptr, x, y);
+        return GlassRobot.convertFromIntArgb(_getPixelColor(ptr, x, y));
     }
 
-    // capture bitmap image of (x, y, x + width, y + height) area
-    native private void _getScreenCapture(long ptr, int x, int y, int width, int height, int[] data);
-    @Override protected Pixels _getScreenCapture(int x, int y, int width, int height, boolean isHiDPI) {
+    @Override
+    protected void getScreenCapture(int x, int y, int width, int height, int[] data) {
+        Application.checkEventThread();
         if (ptr == 0) {
-            return null;
+            return;
         }
-        int data[] = new int[width * height];
         _getScreenCapture(ptr, x, y, width, height, data);
-        return Application.GetApplication().createPixels(width, height, IntBuffer.wrap(data));
     }
+
+    native private void _getScreenCapture(long ptr, int x, int y, int width, int height, int[] data);
 }
 
