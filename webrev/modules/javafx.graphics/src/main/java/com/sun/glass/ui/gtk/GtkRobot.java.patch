--- old/modules/javafx.graphics/src/main/java/com/sun/glass/ui/gtk/GtkRobot.java	2018-01-01 14:51:14.790253800 -0700
+++ new/modules/javafx.graphics/src/main/java/com/sun/glass/ui/gtk/GtkRobot.java	2018-01-01 14:51:14.417232100 -0700
@@ -24,54 +24,108 @@
  */
 package com.sun.glass.ui.gtk;
 
-import com.sun.glass.ui.*;
-import java.nio.IntBuffer;
+import javafx.scene.input.KeyCode;
+import javafx.scene.input.MouseButton;
+import javafx.scene.paint.Color;
+import javafx.scene.robot.Robot;
+
+import com.sun.glass.ui.Application;
+import com.sun.glass.ui.GlassRobot;
+import com.sun.glass.ui.Screen;
 
 final class GtkRobot extends Robot {
 
     @Override
-    protected void _create() {
+    protected void create() {
         // no-op
     }
 
     @Override
-    protected void _destroy() {
+    protected void destroy() {
         // no-op
     }
 
     @Override
+    public void keyPress(KeyCode code) {
+        Application.checkEventThread();
+        _keyPress(code.getCode());
+    }
+
     protected native void _keyPress(int code);
 
     @Override
+    public void keyRelease(KeyCode code) {
+        Application.checkEventThread();
+        _keyRelease(code.getCode());
+    }
+
     protected native void _keyRelease(int code);
 
     @Override
-    protected native void _mouseMove(int x, int y);
+    public native void mouseMove(int x, int y);
+
+    @Override
+    public void mousePress(MouseButton button) {
+        Application.checkEventThread();
+        _mousePress(GlassRobot.convertToRobotMouseButton(button));
+    }
+
+    @Override
+    public void mousePress(MouseButton... buttons) {
+        Application.checkEventThread();
+        _mousePress(GlassRobot.convertToRobotMouseButton(buttons));
+    }
+
+    protected native void _mousePress(int button);
 
     @Override
-    protected native void _mousePress(int buttons);
+    public void mouseRelease(MouseButton button) {
+        Application.checkEventThread();
+        _mouseRelease(GlassRobot.convertToRobotMouseButton(button));
+    }
 
     @Override
+    public void mouseRelease(MouseButton... buttons) {
+        Application.checkEventThread();
+        _mouseRelease(GlassRobot.convertToRobotMouseButton(buttons));
+    }
+
     protected native void _mouseRelease(int buttons);
 
     @Override
+    protected void mouseWheel(int wheelAmt) {
+        Application.checkEventThread();
+        _mouseWheel(wheelAmt);
+    }
+
     protected native void _mouseWheel(int wheelAmt);
 
     @Override
+    public int getMouseX() {
+        Application.checkEventThread();
+        return _getMouseX();
+    }
+
     protected native int _getMouseX();
 
     @Override
+    public int getMouseY() {
+        Application.checkEventThread();
+        return _getMouseY();
+    }
+
     protected native int _getMouseY();
 
     @Override
-    protected int _getPixelColor(int x, int y) {
+    public Color getPixelColor(int x, int y) {
+        Application.checkEventThread();
         Screen mainScreen = Screen.getMainScreen();
         x = (int) Math.floor((x + 0.5) * mainScreen.getPlatformScaleX());
         y = (int) Math.floor((y + 0.5) * mainScreen.getPlatformScaleY());
         int[] result = new int[1];
-        _getScreenCapture(x, y, 1, 1, result);
-        return result[0];
+        getScreenCapture(x, y, 1, 1, result);
+        return GlassRobot.convertFromIntArgb(result[0]);
     }
 
-    @Override native protected void _getScreenCapture(int x, int y, int width, int height, int[] data);
+    @Override native protected void getScreenCapture(int x, int y, int width, int height, int[] data);
 }
