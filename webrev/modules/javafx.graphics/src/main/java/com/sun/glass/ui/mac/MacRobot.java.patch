--- old/modules/javafx.graphics/src/main/java/com/sun/glass/ui/mac/MacRobot.java	2018-01-01 14:51:22.015668800 -0700
+++ new/modules/javafx.graphics/src/main/java/com/sun/glass/ui/mac/MacRobot.java	2018-01-01 14:51:21.647648400 -0700
@@ -24,7 +24,15 @@
  */
 package com.sun.glass.ui.mac;
 
-import com.sun.glass.ui.*;
+import com.sun.glass.ui.Application;
+import com.sun.glass.ui.GlassRobot;
+import com.sun.glass.ui.Pixels;
+
+import javafx.scene.image.Image;
+import javafx.scene.input.KeyCode;
+import javafx.scene.input.MouseButton;
+import javafx.scene.paint.Color;
+import javafx.scene.robot.Robot;
 
 /**
  * MacOSX platform implementation class for Robot.
@@ -34,65 +42,108 @@
     // TODO: get rid of native Robot object
     private long ptr;
 
-    private native long _init();
-    @Override protected void _create() {
+    native private long _init();
+    @Override protected void create() {
+        Application.checkEventThread();
         ptr = _init();
     }
 
-    private native void _destroy(long ptr);
-    @Override protected void _destroy() {
+    native protected void _destroy(long ptr);
+    @Override protected void destroy() {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
         _destroy(ptr);
     }
 
-    @Override native protected void _keyPress(int code);
-    @Override native protected void _keyRelease(int code);
+    native protected void _keyPress(int code);
 
-    private native void _mouseMove(long ptr, int x, int y);
-    @Override protected void _mouseMove(int x, int y) {
+    @Override public void keyPress(KeyCode code) {
+        Application.checkEventThread();
+        _keyPress(code.getCode());
+    }
+
+    native protected void _keyRelease(int code);
+
+    @Override public void keyRelease(KeyCode code) {
+        Application.checkEventThread();
+        _keyRelease(code.getCode());
+    }
+
+    native protected void _mouseMove(long ptr, int x, int y);
+    @Override public void mouseMove(int x, int y) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
         _mouseMove(ptr, x, y);
     }
 
-    private native void _mousePress(long ptr, int buttons);
-    @Override protected void _mousePress(int buttons) {
+    native protected void _mousePress(long ptr, int buttons);
+    @Override public void mousePress(MouseButton button) {
+        Application.checkEventThread();
+        if (ptr == 0) {
+            return;
+        }
+        _mousePress(ptr, GlassRobot.convertToRobotMouseButton(button));
+    }
+
+    @Override public void mousePress(MouseButton... buttons) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
-        _mousePress(ptr, buttons);
+        _mousePress(ptr, GlassRobot.convertToRobotMouseButton(buttons));
     }
 
-    private native void _mouseRelease(long ptr, int buttons);
-    @Override protected void _mouseRelease(int buttons) {
+    native protected void _mouseRelease(long ptr, int buttons);
+    @Override public void mouseRelease(MouseButton button) {
+        Application.checkEventThread();
         if (ptr == 0) {
             return;
         }
-        _mouseRelease(ptr, buttons);
+        _mouseRelease(ptr, GlassRobot.convertToRobotMouseButton(button));
     }
 
-    @Override native protected void _mouseWheel(int wheelAmt);
+    @Override public void mouseRelease(MouseButton... buttons) {
+        Application.checkEventThread();
+        if (ptr == 0) {
+            return;
+        }
+        _mouseRelease(ptr, GlassRobot.convertToRobotMouseButton(buttons));
+    }
 
-    private native int _getMouseX(long ptr);
-    @Override protected int _getMouseX() {
+    native protected void _mouseWheel(int wheelAmt);
+    @Override protected void mouseWheel(int wheelAmt) {
+        Application.checkEventThread();
+        _mouseWheel(wheelAmt);
+    }
+
+    native protected int _getMouseX(long ptr);
+    @Override public int getMouseX() {
+        Application.checkEventThread();
         if (ptr == 0) {
             return 0;
         }
         return _getMouseX(ptr);
     }
 
-    private native int _getMouseY(long ptr);
-    @Override protected int _getMouseY() {
+    native protected int _getMouseY(long ptr);
+    @Override public int getMouseY() {
+        Application.checkEventThread();
         if (ptr == 0) {
             return 0;
         }
         return _getMouseY(ptr);
     }
 
-    @Override native protected int _getPixelColor(int x, int y);
-    @Override native protected Pixels _getScreenCapture(int x, int y, int width, int height, boolean isHiDPI);
+    native protected int _getPixelColor(int x, int y);
+    @Override public Color getPixelColor(int x, int y) {
+        Application.checkEventThread();
+        return GlassRobot.convertFromIntArgb(_getPixelColor(x, y));
+    }
+
+    @Override native protected void getScreenCapture(int x, int y, int width, int height, int[] data);
 }
 
